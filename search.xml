<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git的使用</title>
    <url>/2025/01/27/Git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-进入自己的个人网站"><a href="#1-进入自己的个人网站" class="headerlink" title="1 进入自己的个人网站"></a>1 进入自己的个人网站</h1><p>个人网站仓库地址：<br><a class="link"   href="https://github.com/Tao-oooo/Tao-oooo.github.io.git" >https://github.com/Tao-oooo/Tao-oooo.github.io.git<i class="fas fa-external-link-alt"></i></a><br>去掉中间部分即为个人网站地址<br><a href="https://tao-oooo.github.io/">https://tao-oooo.github.io/</a></p>
<h1 id="2-Github仓库中创建文件夹"><a href="#2-Github仓库中创建文件夹" class="headerlink" title="2 Github仓库中创建文件夹"></a>2 Github仓库中创建文件夹</h1><ol>
<li>点击Create New File</li>
<li>输入文件夹名字</li>
</ol>
<p>输入名字后这里还是File，这时需要在名字后加上”&#x2F;“，此时会自动生成文件夹<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-10.png"
                        alt="创建文件夹"
                 ><br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-11.png"
                        alt="创建文件夹"
                 ><br>因为Github不允许创建空文件，因此需要新建一个临时文件<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-12.png"
                        alt="创建文件夹"
                 ><br>然后点击右上角“Commit changes”<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-13.png"
                        alt="创建文件夹"
                 ><br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-14.png"
                        alt="创建文件夹"
                 ></p>
<h1 id="3-初次使用Github上传代码"><a href="#3-初次使用Github上传代码" class="headerlink" title="3 初次使用Github上传代码"></a>3 初次使用Github上传代码</h1><h2 id="3-1-在-Github-上创建新的仓库"><a href="#3-1-在-Github-上创建新的仓库" class="headerlink" title="3.1 在 Github 上创建新的仓库"></a>3.1 在 Github 上创建新的仓库</h2><p>这边可以看网上的资料创建仓库。</p>
<h2 id="3-2-安装-Git-工具包"><a href="#3-2-安装-Git-工具包" class="headerlink" title="3.2 安装 Git 工具包"></a>3.2 安装 Git 工具包</h2><p>Git 工具包可以去官方网站下载，并安装。<br>安装完成后，Windows 系统的开始菜单中会有 Git 软件，如下图所示：<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-9.png"
                        alt="Git 软件"
                 ><br>其中， Git Bash 就是 Git 工具的命令行窗口，后续的 GitHub 相关操作都会在此命令行窗口中执行。</p>
<h2 id="3-3-在-Github-上添加-SSH-Key"><a href="#3-3-在-Github-上添加-SSH-Key" class="headerlink" title="3.3 在 Github 上添加 SSH Key"></a>3.3 在 Github 上添加 SSH Key</h2><p>在 GitHub 上添加 SSH Key 之前需要在本地先生成 SSH Key。<br>打开上面讲到的 Git Bash 命令行窗口，先使用以下命令配置一下 Git Config：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;emile-name@email.com&quot;</span><br></pre></td></tr></table></figure>
<p><code>username</code> 和 <code>emile-name@email.com</code> 的信息要与 Github 上申请的账号一致。</p>
<p>然后通过以下命令生成 SSH Key：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;emile-name@email.com&quot;</span><br></pre></td></tr></table></figure>
<p>这里的邮箱也要与 Github 上的一致，使用此命令后，如果不需要做其他特殊设置的话可以一路回车到底，最后 Git Bash 上可见如下的画面：<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-1.png"
                        alt="生成 SSH Key"
                 ></p>
<p>然后使用如下命令查看 SSH Key 的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>内容如下：<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-2.png"
                        alt="查看 SSH Key"
                 ></p>
<p>最后复制上述 SSH Key 的内容，填到 Github 网站即可。</p>
<h2 id="3-4-从本地仓库上传代码到-Github-上"><a href="#3-4-从本地仓库上传代码到-Github-上" class="headerlink" title="3.4 从本地仓库上传代码到 Github 上"></a>3.4 从本地仓库上传代码到 Github 上</h2><h3 id="3-4-1-检查是否与-Github-连接成功"><a href="#3-4-1-检查是否与-Github-连接成功" class="headerlink" title="3.4.1 检查是否与 Github 连接成功"></a>3.4.1 检查是否与 Github 连接成功</h3><p>添加 SSH Key 后，在 Git Bash 中输入如下命令查看是否成功连接 Github：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<hr>
<p>有时候可能会出现报如下错误的情况 [<a class="link"   href="https://zhuanlan.zhihu.com/p/521340971]%EF%BC%8C" >https://zhuanlan.zhihu.com/p/521340971]，<i class="fas fa-external-link-alt"></i></a><br><code>ssh: connect to host github.com port 22: Connection refused</code> 这个错误提示的是连接 <code>github.com</code> 的22端口被拒绝了。此时可以尝试连接 443 端口，做法是修改 SSH 的配置文件。在 Git Bash 中使用 vim 命令打开 config：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure>
<p>然后再config文件中输入如下文本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure>
<p>然后输入如下命令保存退出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>
<p>回车后即可保存，再次检验是否连接成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<hr>
<p>如果连接成功，则会提示如下信息 (如果是第一次的会提示是否continue，输入yes即可)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi xxxxx! You&#x27;ve successfully authenticated, but GitHub does not</span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure>
<p>如图所示：<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-3.png"
                        alt="SSH 连接成功"
                 ></p>
<h3 id="3-4-2-上传文件"><a href="#3-4-2-上传文件" class="headerlink" title="3.4.2 上传文件"></a>3.4.2 上传文件</h3><p>首先进入本地仓库文件夹，如果还没有本地仓库文件夹，那么可以创建一个新的文件夹。通常的做法是，本地仓库文件夹的名称与 GitHub 仓库名称一致。新创建的文件夹没有 Git Branch 的概念，所以需要先创建分支。可以使用如下命令创建主分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>完成后会在文件夹后面显示主分支名，如图中红框所示：<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-4.png"
                        alt="创建主分支"
                 ><br><code>master</code> 就是主分支名字，最新版的 GitHub 主分支名变成了 <code>main</code> ，但两者其实是一个意思。</p>
<p>如果我们从 GitHub 上手动下载了项目文件夹 (非 <code>git clone</code> 的方式下载的项目) ，那么此文件夹同样会没有分支名称。所以使用 Git Bash 进入项目文件夹时并不会显示 <code>master</code> 或 <code>main</code> 之类的分支名称。此时如果希望将修改后的项目代码上传到 GitHub ，那么同样需要使用上述命令创建分支。为了避免出现未知问题，建议使用 <code>git clone</code> 命令拉取项目代码，而非使用手动下载的方式。使用 <code>git clone</code> 拉取的项目文件夹会将整个项目的代码更新状态统一保存，方便后续查看。</p>
<p>一种简单的查看项目文件夹是否创建分支的方法：打开隐藏文件可视化，如果项目文件夹中出现 <code>.git</code> 文件夹，则说明此项目有分支信息，否则无分支信息。</p>
<p>然后使用如下命令与 Github 上新建项目连接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin xxx</span><br></pre></td></tr></table></figure>
<p>xxx 部分就是 Github 仓库的链接，如下图所示：<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-5.png"
                        alt="连接 GitHub 仓库地址"
                 ></p>
<p>接着使用如下命令将本地仓库中的文件加入暂存区：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<p><code>.</code> 表示将本地文件夹下所有文件都加入暂存区。<br>如图所示：<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-6.png"
                        alt="暂存区"
                 ></p>
<p>然后为本地上传文件添加注释，方便以后查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;20240922&quot;</span><br></pre></td></tr></table></figure>
<p>“20240922” 就是加的注释，可以按照需求添加内容。<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-7.png"
                        alt="Commit"
                 ></p>
<p>最后就可以提交本地文件到 Github 新建项目中了，使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-8.png"
                        alt="提交"
                 ></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a class="link"   href="https://zhuanlan.zhihu.com/p/138305054" >https://zhuanlan.zhihu.com/p/138305054<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://zhuanlan.zhihu.com/p/193140870" >https://zhuanlan.zhihu.com/p/193140870<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Handbook</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Git的使用</tag>
        <tag>GitHub上传</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo基本用法</title>
    <url>/2025/02/03/Hexo%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-新建一篇博客"><a href="#1-新建一篇博客" class="headerlink" title="1 新建一篇博客"></a>1 新建一篇博客</h2><p>打开命令行窗口，这里以 Git Bash 为例， Windows CMD 同样可以进行相同操作，使用如下命令新建一篇博客文章：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post 博客文章名称</span><br></pre></td></tr></table></figure>
<p>使用上述命令后，在个人博客项目的 <code>source/_posts</code> 目录下会自动生成 <code>博客文章名称.md</code> 文件，如下图所示。<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Hexo%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/image-1.png"
                        alt="创建一篇博客文章"
                 ></p>
<p>只需再此文件中编辑需要发布的内容即可。</p>
<h2 id="2-发布文章"><a href="#2-发布文章" class="headerlink" title="2 发布文章"></a>2 发布文章</h2><p>依然是在 Git Bash 中操作，使用如下命令行将更新的博客文章上传到 github.io 仓库中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo d -g</span><br></pre></td></tr></table></figure>

<p>这里需要注意的是， <code>hexo clean &amp;&amp; hexo d -g</code> 实际上是 2 句命令行，拆分为 <code>hexo clean</code> 和 <code>hexo d -g</code> 分别运行也是可以的。另外， <code>hexo</code> 命令在 Windows CMD 中同样可以运行，但是无法识别 <code>&amp;&amp;</code> 的含义，此时就可以将其拆分为 2 条命令分别运行。</p>
<p>运行命令后如下图所示，出现 <code>Deploy done: git</code> 则表示发布成功。<br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Hexo%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/image-2.png"
                        alt="博客文件上传"
                 ><br><img  
                       lazyload
                       alt="image"
                       data-src="/../images/Hexo%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/image-3.png"
                        alt="博客文件上传"
                 ></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a class="link"   href="https://keep-docs.xpoet.cn/" >Keep 主题使用手册<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://hexo.io/zh-cn/docs/writing" >Hexo 文档<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://easyhexo.com/1-Hexo-install-and-config/" >Hexo 安装与配置<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Handbook</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>个人博客</tag>
        <tag>Hexo基本使用方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Template</title>
    <url>/2025/01/25/Template/</url>
    <content><![CDATA[<p>Welcome to use Hexo Theme Keep.</p>
<p>This is your very first post. Check <a class="link"   href="https://keep-docs.xpoet.cn/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Keep theme, you can ask me on <a class="link"   href="https://github.com/XPoet/hexo-theme-keep/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<span id="more"></span>

<p><img  
                       lazyload
                       alt="image"
                       data-src="/../images/keep-slogan.svg"
                        alt="keep-slogan"
                 ></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Keep</tag>
      </tags>
  </entry>
</search>
